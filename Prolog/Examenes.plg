%%%%%%%%%%%%%%%%%%%%%%%
% Funciones básicas
%%%%%%%%%%%%%%%%%%%%%%%
concatena([],Ys,Ys).
concatena([X|Xs],Ys,[X|XsYs]) :-
	concatena(Xs,Ys,XsYs).

%%%%%%%%%%%%%%%%%%%%
%   Febrero 2011
%%%%%%%%%%%%%%%%%%%%
% (0.5 + 0.5 puntos) Ejercicio 2: Define mediante recursión los siguientes predicados:
% no_esta/2
no_esta(_,[]).
no_esta(X,[Y|Ys]) :-
	X \== Y,
	no_esta(X,Ys).

% selecciona/3
selecciona(X,[X|Ys],Ys).
selecciona(X,[Y|Ys],[Y|Zs]) :-
	selecciona(X,Ys,Zs).

% (0.5 puntos) Ejercicio 3: Define un predicado recursivo de cola producto(+Xs, -N) que dada una lista de enteros Xs devuelva en N el producto de sus elementos. Por ejemplo:
% ?- producto([1,2,3,4,5],N).
% N = 120.

producto(Xs,P) :-
	producto(Xs,1,P).

producto([],P,P).
producto([X|Xs],Ac,P) :-
	NAc is Ac*X,
	producto(Xs,NAc,P).

%  (1.0 punto) Ejercicio 4: Define el predicado interseccion(+Xs, +Ys, -Zs) que devuelve en Zs la interseccion de las listas Xs e Ys. Por ejemplo:
% ?- interseccion([a,b,c,d,e,f],[1,a,2,3,e,f,4],Zs).
% Zs = [a,e,f] ;
% false.
%
% ?- interseccion([a,X,b,Y,c],[A,Z,w,Y,b], Zs).
% Zs = [b,Y] ;
% false.

esta(X,[X|Xs]).
esta(X,[Y|Ys]) :-
	esta(X,Ys).

interseccion([], _, []).
interseccion([X|Xs], Ys, [X|Zs]) :-
	esta(X,Ys),
	interseccion(Xs,Ys, Zs).
interseccion([X|Xs], Ys, Zs) :-
	no_esta(X,Ys),
	interseccion(Xs, Ys, Zs).

% (1.5 puntos) Ejercicio 5: Define el predicado suma_demas(+Xs) que se satisface si la lista de enteros Xs contiene un elemento que es igual a la suma de los demás elementos. Por ejemplo:
% ?- suma_demas([1,2,3,10,4]).
% true ;
% false.

suma([],0).
suma([X|Xs],N) :-
	suma(Xs,M),
	N is M+X.

suma_demas(XsNYs) :-
	selecciona(N,XsNYs,XsYs),
	suma(XsYs,N).
	
% (1.5 puntos) Ejercicio 6: Define el predicado pareja_sp(+Xs,-A,-B) que dada una lista de enteros Xs devuelve dos elementos de la lista A y B tales que A aparece antes que B, la suma de ambos es menor que la suma de los elementos que preceden a A y el producto de ambos es mayor que el producto de los elementos que suceden a B. Por ejemplo:
% ?- pareja_sp([30,8,12,6,34],A,B).
% A = 8,
% B = 6 ;
% A = 12,
% B = 6 ;
% A = 6,
% B = 34 ;
% false.

pareja_sp(Xs, A, B) :-
	concatena(Antes, [A|Ts], Xs),
	concatena(_, [B|Despues], Ts),
	suma(Antes,S),
	S > A+B,
	producto(Despues,P),
	A*B > P.
	
% (1.5 + 1.5 puntos) Las relaciones de amistad de una red social están represantadas por el predicdo amigos(?P,?As), donde P es una persona y As es una lista con las personas que son amigos de P. El predicado amigos/2 está definido por un conjunto de hechos como el siguiente:
amigos(juan,[pedro]).
amigos(pedro,[juan, manuel, antonio,laura]).
amigos(manuel, [pedro, antonio, sonia]).
amigos(antonio, [manuel, sonia, pedro, sandra]).
amigos(laura, [sandra, pedro, sonia]).
amigos(sonia, [laura antonio, sandra, manuel]).
amigos(sandra, [antonio, sonia, laura]).

sugerido(X,K,S,Comunes) :-
	amigos(X,Ax),
	amigos(S,AS),
	S \== X,
	no_esta(S,Ax),
	interseccion(Ax, As, Comunes),
	longitud(Comunes,N),
	N >= K.

%%%%%%%%%%%%%%%%%%%%%%%%%
%     Febrero 2010
%%%%%%%%%%%%%%%%%%%%%%%%%

% Problema 3. (1.0 pto.) Define el predicado aplana(+Xss, -Xs) que "aplana" una lista de listas. Por ejemplo:
% ?- aplana([[a,b,c], [d], [], [e,f]], Xs).
% Xs = [a, b, c, d, e, f].
%
% ?- aplana([[a,b]], Xs).
% Xs = [a,b].
%
% ?- aplana([[]], Xs).
% Xs = [].
%
% ?- aplana([], Xs).
% Xs = [].

aplana([],[]).
aplana([Xs|Xss],Zs) :-
	aplana(Xss,Ys),
	concatena(Xs, Ys, Zs).

% Problema 4. (1.0 + 0.5 ptos.) Define el predicado trocea(+Xs, -As, Bs, -Cs) que, dada una lista Xs, la separa en tres trozos As, Bs y Cs, tales que Bs no es vacío y los tres juntos forman Xs. Por ejemplo:
% ?- trocea([a,b,c], As, Bs, Cs).
% As = [],		Bs = [a],		Cs = [b,c] ;
% As = [],		Bs= [a,b],		Cs = [c] ;
% As = [],		Bs= [a,b,c],	Cs = [] ;
% As = [a],		Bs = [b],		Cs = [c] ;
% As = [a],		Bs= [b,c],		Cs = [] ;
% As = [a, b],	Bs = [c],		Cs = []
% false.

trocea(Xs, As, [B|Bs], Cs) :-
	concatena(As,[B|BsCs],Xs),
	concatena(Bs, Cs, BsCs).

% Problema 5.
% Define el predicado inicial(-E0) que devuelve en E0 un casillero en el estado inicial.
inicial([v,v,v,v,v,v,b,n,b,n,b]).

% Define el predicado final(+Ei) que tiene éxito si Ei es un casillero reorganizado. Por ejemplo:
% ?- final([v,v,b,b,b,n,n,v,v,v,v]).
% true.
% ?- final([v,v,b,b,b,v,n,n,v,v,v]).
% false.
% ?- final([v,v,b,b,n,b,n,v,v,v,v]).
% false.

contiguas([b,b,b,n,n]).
contiguas([n,n,b,b,b]).

% sin comprobar si el estado es válido
final(Fs) :-
	contiguas(Fichas),
	trocea(Fs, _, Fichas, _).

% comprobando si el estado es válido
final(Fs) :-
	contiguas(Fichas),
	trocea(Fs, Xs, Fichas, Ys),
	concatena(Xs, Ys, [v,v,v,v,v,v,v]).

%%%%%%%%%%%%%%%%%%%%%
%   Febrero 2009
%%%%%%%%%%%%%%%%%%%%%
% Problema 2. (1.0 pto.) Define el predicado todos_iguales(+Xs) que se satisface si la lista Xs tiene todos los elementos iguales entre sí. Por ejemplo:
todos_iguales([]).
todos_iguales([_]).
todos_iguales([X,Y|Xs]) :-
	todos_iguales([Y|Xs]),
	X == Y.
	
% Problema 3. (0.25 + 0.25 + 1.0 ptos.) Tenemos bolas de colores rojo, verde y azul. Los colores están ordenados circularmente de manera que el sucesor del rojo es el verde, el del verde el azul, y el del azul el rojo.
% a. Define el predicado sucesor(?X, ?Y) que se satisface si Y es el color sucesor de X. Por ejemplo:
sucesor(rojo,verde).
sucesor(verde,azul).
sucesor(azul,rojo).

% Define el predicado sucesores(+Xs, -Ys) que dada una lista de bolas de colores Xs devuelve la lista Ys donde cada bola de Xs ha sido reemplazada por su sucesora. Por ejemplo:
% ?- sucesores([rojo, verde, verde, rojo, azul], Ys).
% Ys = [verde, azul, azul, verde, rojo].
sucesores([],[]).
sucesores([X|Xs],[Y|Ys]) :-
	sucesor(X,Y),
	sucesores(Xs,Ys).

% Define un predicado recursivo de cola cuenta(+Xs, -R, -V, -A) que dada una lista de bolas de colores Xs devuelva en R, V y A el número de bolas rojas, verdes y azules que contiene. Por ejemplo:
% ?- cuenta([rojo, verde, verde, azul, rojo, azul, rojo, verde], R, V, A).
% R = 3,
% V = 3,
% A = 2 ;
% false.

cuenta(Xs,R,V,A) :- cuenta_cola(Xs,0,0,0,R,V,A).
cuenta_cola([],R,V,A,R,V,A).
cuenta_cola([rojo|Xs],Acr,Acv,Aca,R,V,A) :- % caso bola roja
	NAc is Acr + 1,
	cuenta_cola(Xs,NAc,Acv,Aca,R,V,A).
cuenta_cola([verde|Xs],Acr,Acv,Aca,R,V,A) :- % caso bola verde
	NAc is Acv + 1,
	cuenta_cola(Xs,Acr,NAc,Aca,R,V,A).
cuenta_cola([azul|Xs],Acr,Acv,Aca,R,V,A) :- % caso bola azul
	NAc is Aca + 1,
	cuenta_cola(Xs,Acr,Acv,NAc,R,V,A).

% Define el predicado tres(+Xs) que tiene éxito si la lista de bolas Xs está formada por trse segmentos consecutivos no vacíos monocromos, tales que el color de cada segmento es diferente del de los demás. Por ejmplo:
% ?- tres([rojo,rojo,azul,azul,verde]).
% true ;
% false.
% ?- tres([rojo,verde,verde,rojo]).
% false.